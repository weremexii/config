global
// JavaScript code
function gen_matrix(nrow, ncol) {
	let results = "";
	let order = 1;
	for (var i=0; i < nrow; i++){
		results += ' ';
		for(var j = 0; j < ncol - 1; j++){
			results += "$" + (order).toString() + " & ";
			order ++;
		}
		results += "$" + (order).toString() + " \\\\" + "\\";
		order ++;
	}
	return results;
}

function gen_matrix_transposed(nrow, ncol) {
	let results = "";
	for (var i = 0; i < nrow; i++){
		results += ' ';
        var j = 0;
		for(; j < ncol - 1;j++){
			results += "$" + (i + j * ncol + 1).toString() + " & ";
		}
		results += "$" + (i + j * ncol + 1).toString() + " \\\\" + "\\";
	}
	return results;
}

function tes_matrix(nrow, ncol,t) {
	let results = "";
	let order = 1;
	for (var i=0; i<nrow; i++){
		results += '	';
		for(var j = 0;j <ncol-1;j++){
			if (order > 1 ){
				results += "${" +(order ).toString() + ":" + t[order-2] + "}\t & ";
			}
			else{
				results += "$" +(order ).toString()  + " & ";
			}
			order ++;
		}
		results += "$"+(order).toString() +" \\\\" + "\\ ";
		order ++;
	}
	return results;
}

// 输出一个表格
function createTable(rows, cols) {
    let ret = "";
    let order = 1;
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|---";
            } else {
                ret += "| $" + (order).toString() + " ";
                order++;
            }
        }
        ret += "|\n"
    }
    return ret;
}

endglobal

# 说明
# 使用的特殊语法
# + 自动下标: 字母和 2 位以内数字组合会被转化为下标组合
# + format 函数: f 开头的系列 snip 会将它前面的内容放到函数内
# + visual 函数: v 开头的系列 snip 会将之前选中的内容放到函数内
# + 接力: 触发多个 snip 来完成一个大的代码段, 例如 math 环境中的 sum

# 写法说明
# + 接力: 需要确保明确启动接力的可选字符, 一般只要单个; 接力的最后一项只保留 `$0`, 留空跳转交给第一个接力片段
# + 优先级: 按层来, 首先无优先级和 200 为一层, 200 用于防止某些更短的命令作为后缀比长命令更先触发, 比如 `iff` 和 `diff`, format 和它的原型

# 非数学片段

# \` is called grave accent
snippet mdcode "Markdown Code Block" wA
``rv = "\`\`\`"``$1
$2
``rv = "\`\`\`"``$0
endsnippet


# 数学环境内片段

snippet lm "inline Math" wA
$${1}$$0
endsnippet

snippet dm "display Math" wA
$$
${1}
$$$0
endsnippet

# vscode 的 auto-close 也会在数学环境里触发, 但当在结尾的 `$` 前不会, 使用下面两个 snip 来触发
snippet ( "auto close ()" iAm
(${1})
endsnippet

snippet [ "auto close []" iAm
[${1}]
endsnippet

# 前缀片段: 下面的正则表达式的元素不能成为其他 snippets 的前缀, 基本是一些好记的短 latex 命令

snippet `([\W]+)(?<!\\)(alpha|beta|gamma|delta|epsilon|varepsilon|zeta|eta|theta|vartheta|iota|kappa|lambda|mu|nu|xi|pi|varpi|rho|varrho|sigma|varsigma|tau|upsilon|phi|varphi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)` "greek" Am
``rv = m[1]``\\``rv = m[2]``
endsnippet

snippet `([\W]+)(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|arcsin|arccos|arctan|arccot|arccsc|arcsec|oint|iiint|iint|int|ell|nabla|in|notin|not|neg|prime)` "function" Am
``rv = m[1]``\\``rv = m[2]``
endsnippet
# 像诸如 `sum`, `prod`, `max` 等常常被修饰的函数放到后面的自定义 snippets 中

snippet `([\W]+)(?<!\\)(cap|cup|land|lor|lnot|oplus|otimes|sqcap|sqcup|vdash|models)` "logic operator" Am
``rv = m[1]``\\``rv = m[2]``
endsnippet

snippet `([\W]+)(?<!\\)(bot|top|pm)` "symbols" Am
``rv = m[1]``\\``rv = m[2]``
endsnippet

snippet dis "displaystyle" wAm
\displaystyle 
endsnippet

snippet `([\W]+)(?<!\\)(quad|qquad)` "不可修饰, 因此提供$0" Am
``rv = m[1]``\\``rv = m[2]`` $0
endsnippet

snippet `([\W]+)(?<!\\)(sqrt|tag)` "内容体函数, 提供$1和$0" iAm
``rv = m[1]``\\``rv = m[2]``{$1}$0
endsnippet

# 标记: 围绕符号周围的标记

## 上标
snippet tp "上标, 任意" iAm
^{$1}$0
endsnippet

snippet inv "求逆" im
^{-1}$0
endsnippet

snippet transpose "转置" im
^{\top}$0
endsnippet

## 下标

snippet td "subscript" iAm
_{${1}}$0
endsnippet

snippet `([A-Za-z])(\d)` "接数字后自动转为下标" Am
`` rv = m[1] + "_" + m[2]``
endsnippet

snippet `([A-Za-z])_(\d{2})` "再接数字转为下标内容体, relay" Am
`` rv = m[1] + "_{" + m[2] + "$1}$0" ``
endsnippet

## 顶部, 同时也是内容体函数

snippet hbar "上划线" Am
\overline{$1}$0
endsnippet

snippet hat "上尖帽" Am
\hat{$1}$0
endsnippet

# 简单符号和运算符: trigger 也使用特殊符号, 简单字符重复或者极长的 trigger, 非计算符可以使用 `w` flag

snippet oo "无穷" wAm
\infty
endsnippet

snippet <> "hokje" wAm
\diamond 
endsnippet

snippet dot "点乘" Am
\cdot $0
endsnippet

snippet xx "叉乘" Am
\times $0
endsnippet

snippet -> "to" Am
\to $0
endsnippet

snippet !> "mapsto" Am
\mapsto $0
endsnippet

snippet => "implies" Am
\implies $0
endsnippet

snippet =< "implied by" Am
\impliedby $0
endsnippet

snippet iff "if and only if" Am
\iff $0
endsnippet

snippet EE "exist" wAm
\exists $0
endsnippet

snippet AA "forall" wAm
\forall $0
endsnippet

#snippet bec "解析几何推导用" Am
#\because 
#endsnippet
#
#snippet thr "解析几何推导用" Am
#\therefore 
#endsnippet

snippet -- "集合减法，反斜杆" Am
\setminus $0
endsnippet

priority 100
snippet empset "emptyset" wAm
\emptyset
endsnippet

snippet subseteq "subseteq" Am
\subseteq 
endsnippet

snippet sqsubseteq "sqsubset" Am
\sqsubseteq 
endsnippet

snippet subsetneq "subseteq" Am
\subseteq 
endsnippet

snippet sqsubsetneq "sqsubset" Am
\sqsubseteq 
endsnippet

snippet >= "greater than" Am
\geqslant $0
endsnippet

snippet <= "less than" Am
\leqslant $0
endsnippet

snippet != "no equals" Am
\neq $0
endsnippet

snippet == "恒等" Am
\equiv $0
endsnippet

snippet ~~ "≈" Am
\approx $0
endsnippet

snippet ~= "约等于+等于" Am
\cong $0
endsnippet

snippet >> ">>" Am
\gg $0
endsnippet

snippet << "<<" Am
\ll $0
endsnippet

# vscode 的 auto-close 会给 `<` 补全 `>`, 目前没找到修改的方法, 于是给 `<` 写个 snip
snippet less "<" Am
< $0
endsnippet

snippet greater ">" Am
> $0
endsnippet

snippet par( "left( right)" wAm
\left( ${1} \right)$0
endsnippet

snippet par| "left| right|" wAm
\left| ${1} \right|$0
endsnippet

snippet par{ "left\{ right\}" wAm
\left\\{ ${1} \right\\}$0
endsnippet

snippet set "\{ \}" wAm
\\{ ${1} \\}$0
endsnippet

snippet par[ "left[ right]" wAm
\left[ ${1} \right]$0
endsnippet

snippet par< "leftangle rightangle" wAm
\left<${1} \right>$0
endsnippet

snippet ceil "ceil" wAm
\left\lceil $1 \right\rceil$0
endsnippet

snippet floor "floor" wAm
\left\lfloor $1 \right\rfloor$0
endsnippet

# 内容体函数, 改名

snippet // "Fraction" iAm
\\frac{$1}{$2}$0
endsnippet 

snippet v/ "Fraction" iAm
\\frac{${VISUAL}}{$1}$0
endsnippet 

snippet `((\d+)|(\d*)(\\)?([A-Za-z!]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" Am
\frac{``rv = m[1]``}{$1}$0
endsnippet

snippet `(?<=\s)(\\alpha|\\beta|\\gamma|\\delta|\\epsilon|\\varepsilon|\\zeta|\\eta|\\theta|\\vartheta|\\iota|\\kappa|\\lambda|\\mu|\\nu|\\xi|\\pi|\\varpi|\\rho|\\varrho|\\sigma|\\varsigma|\\tau|\\upsilon|\\phi|\\varphi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-Za-z]{1,2})?(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?(\([^)]+\))(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?\/` "Fraction with ()" Am
``rv = "\\frac{" + m.slice(1, m.length).join('') + "}{$1}$2"``
endsnippet

snippet txt "数学环境输入文本" wAm
\text{$1}$0
endsnippet

snippet tit "text it" wAm
\textit{$1}$0
endsnippet

# 手写体
snippet mcal "手写体" wAm
\mathcal{$1}$0
endsnippet
# 黑板报体
priority 100
snippet mbb "黑板报体" wAm
\mathbb{$1}$0
endsnippet
# 粗体
snippet mbf "拉正的粗体" wAm
\mathbf{$1}$0
endsnippet
# 加粗
snippet mbs "粗体" wAm
\boldsymbol{$1}$0
endsnippet

snippet mrm "拉正的字体, 常规" wAm
\mathrm{$1}$0
endsnippet

snippet mit "意大利斜体, 默认" wAm
\mathit{$1}$0
endsnippet

snippet mfk "德文尖字体" wAm
\mathfrak{$1}$0
endsnippet

snippet opn "operatorname style" wAm
\operatorname{$1}$0
endsnippet

# 数学环境

# 自定义长 snippets: trigger 和较短的 latex 命令相关的话, 要做分隔符匹配

## 普通的

snippet ssmulvar "multiple variables separated by comma" wAm
${1:\\alpha}_1,${1:\\alpha}_2,\\cdots,${1:\\alpha}_${2:n}
endsnippet

snippet ssmulvarplus "flat sum of multiple variables" wAm
${1:k}_1${2:\\alpha}_1+${1:k}_2${2:\\alpha}_2+\\cdots+${1:k}_${3:n}${2:\\alpha}_${3:n}
endsnippet

snippet ssint "integral" wAm
\int_{${1:-\infty}}^{${2:\infty}} ${3} ~\\mathrm{d}${4:x}$0
endsnippet

snippet sstaylor "taylor" wAm
\sum\limits_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet ssderiv "derivative" wAm
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}}$0
endsnippet

snippet sslimit "limit" wAm
\lim\limits_{${1:n} \to ${2:\infty}}
endsnippet

snippet sspartial "partial derivative" wAm
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

priority 100
snippet ssdiff "differential" wAm
\mathrm{d}$0
endsnippet

snippet ssnorm wAm
\left\| ${1} \right\|_{$2}$3
endsnippet

snippet ssabs "absolute value" wAm
\left\vert ${1} \right\vert $0
endsnippet

## 接力 snippets

### sum 的接力
snippet `([\W]+)(?<!\\)sum` "sum relay" Am
``rv = m[1]``\sum$1 $0
endsnippet

snippet `\\sum([A-Za-z])` "sum 2nd relay" Am
\sum_{``rv = m[1]``$1}$0
endsnippet

snippet `\\sum_{([a-zA-Z][=\w\s]*)}([a-zA-Z\d])` "sum 3rd relay" Am
\sum_{``rv = m[1]``}^{``rv = m[2]``$0}
endsnippet

### prod 的接力, 和 sum 一致
snippet `([\W]+)(?<!\\)prod` "prod relay" Am
``rv = m[1]``\prod$1 $0
endsnippet

snippet `\\prod([A-Za-z])` "prod 2nd relay" Am
\prod_{``rv = m[1]``$1}$0
endsnippet

snippet `\\prod_{([a-zA-Z][=\w\s]*)}([a-zA-Z\d])` "prod 3rd relay" Am
\prod_{``rv = m[1]``}^{``rv = m[2]``$0}
endsnippet

### max/min 的接力
snippet `([\W]+)(?<!\\)(max|min)` "max/min" Am
``rv = m[1]``\``rv = m[2]``$1 $0
endsnippet

snippet `\\(max|min)([A-Za-z])` "max/min 2nd relay" Am
\``rv = m[1]``_{``rv = m[2]``$0}
endsnippet